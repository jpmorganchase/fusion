[project]
name = "pyfusion"
version = "1.1.3"

homepage = "https://github.com/jpmorganchase/fusion"
description = "JPMC Fusion Developer Tools"
authors = [
    { name = "FusionDevs", email = "fusion_developers@jpmorgan.com" }
]
readme = "README.md"
license = "Apache-2.0"
classifiers = [
    'Development Status :: 5 - Production/Stable',
    'Intended Audience :: Developers',
    'License :: OSI Approved :: Apache Software License',
    'Natural Language :: English',
    'Programming Language :: Rust',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.8',
    'Programming Language :: Python :: 3.9',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.12',
    'Typing :: Typed',
]

requires-python = ">= 3.9"

dependencies = [
    "requests >= 2",
    "pandas >= 1.1",
    "joblib >= 1.1",
    "tabulate >= 0.8",
    "tqdm >= 4",
    "pyarrow >= 11",
    "fsspec >= 2021",
    "aiohttp >= 3.7.1",
]

[build-system]
requires = ["maturin>=1.2,<2.0"]
build-backend = "maturin"

[tool.maturin]
python-source = "py_src"
module-name = "fusion._fusion"
features = ["pyo3/extension-module"]

[project.optional-dependencies]
doc = [
    "mkdocs",
    "docutils",
    "mkdocs-material",
    "mkdocstrings",
    "mkdocstrings-python",
    #"mkdocs-material-extension",
    "mkdocs-autorefs",
    "mkdocs-include-markdown-plugin",
    "mkdocs-git-revision-date-plugin",
    "mkdocs-jupyter",
    "jupyter_contrib_nbextensions",
    "mike",
    "notebook >=6.0,<7.0"
]

aws = [
    "s3fs"
]

gcs = [
    "gcsfs"
]

azr = [
    "adlfs"
]

polars = [
    "polars"
]

events = [
    "sseclient",
    "aiohttp-sse-client"
]


[tool.rye]
managed = true
dev-dependencies = [
    "aioresponses>=0.7.6",
    "auditwheel>=6.0.0; sys_platform=='linux'",
    "bump-my-version",
    "cffi>=1.16.0; sys_platform=='darwin'",
    "freezegun>=1.4.0",
    "ipython",
    "maturin>=1.2,<2.0",
    "moto[s3]>=5.0.5",
    "mypy",
    "patchelf>=0.17.2.1; sys_platform=='linux'",
    "pandas >= 1.1",
    "pandas-stubs>1.1",
    "pip",
    "polars",
    "pytest",
    "pytest-asyncio>=0.23.6",
    "pytest-cov",
    "pytest-mock>=3.14.0",
    "pytest-random-order>=1.1.1",
    "pyzmq>25.1",
    "requests-mock>=1.12.1",
    "ruff",
    "toml",
    "tox",
    "tox-gh-actions",
    "twine",
    "types-requests >=2",
    "types-tabulate >= 0.8.8",
    "types-tqdm>=4",
    "virtualenv",
    "ziglang>=0.11.0; sys_platform=='linux'",
    "pytest-aiohttp>=1.0.5",
    "tox-uv>=1.7.0",
]


[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.wheel]
packages = [
    "fusion"
]

[tool.ruff]
line-length = 120
indent-width = 4
target-version = "py39"


[tool.ruff.lint]
extend-select = [
    'F',     # Pyflakes
    'I',     # isort
    'N',     # pep8-naming
    'E',     # pycodestyle
    'UP',    # pyupgrade
    'YTT',   # flake8-2020
    'ASYNC', # flake8-async
    'TRIO',  # Trio
    'BLE',   # flake8-blind-except
    #'FBT',   # flake8-boolean-trap
    'ANN',   # flake8-annotations
    'B',     # flake8-bugbear
    'A',     # flake8-builtins
    'C4',    # flake8-comprehensions
    'DTZ',   # flake8-datetimez
    'T10',   # flake8-debugger
    'EXE',   # flake8-executable
    'FA',    # flake8-future-annotations
    'ICN',   # flake8-import-conventions
    'INP',   # flake8-no-pep420
    'PIE',   # flake8-pie
    'T20',   # flake8-print
    'PYI',   # flake8-pyi
    'PT',    # flake8-pytest-style
    'Q',     # flake8-quotes
    'SIM',   # flake8-simplify
    'TID',   # flake8-tidy-imports
    'PTH',   # flake8-use-pathlib
    'TCH',   # flake8-type-checking
    'TD',    # flake8-todos
    'FIX',   # flake8-fixme
    'ERA',   # eradicate
    'PD',    # pandas-vet
    'ARG',   # flake8-unused-arguments
    'PL',    # Pylint
    'FLY',   # flynt
    'NPY',   # NumPy-specific rules
    'PERF',  # Perflint
]
extend-ignore = ["S101", "FA100", "F541", "ANN101", "ANN401"]

[tool.ruff.lint.isort]
known-first-party = ["fusion"]

[tool.ruff.lint.pylint]
max-args = 7

[tool.pytest.ini_options]
addopts = "--cov fusion --cov-report html:.reports/html --cov-report term --random-order -p no:warnings -v"
minversion = "8.0"
pythonpath = ["src", "py_tests"]
testpaths = "py_tests"
pythonfiles = "test_*.py"

[tool.mypy]
ignore_missing_imports = true
show_error_codes = true
strict = true
disallow_untyped_defs = true

[tool.coverage]
html.show_contexts = true
html.skip_covered = false
report.fail_under = 60
run.parallel = true

[tool.bumpversion]
current_version = "1.1.3"
parse = '(?P<major>\d+)\.(?P<minor>\d+)\.(?P<patch>\d+)(?:-(?P<release>[a-z]+)(?P<candidate>\d+))?'
serialize = [
    '{major}.{minor}.{patch}-{release}{candidate}',
	'{major}.{minor}.{patch}'
]
search = "{current_version}"
replace = "{new_version}"
regex = false
ignore_missing_version = false
tag = false
sign_tags = false
tag_name = "v{new_version}"
tag_message = "Bump version: {current_version} → {new_version}"
allow_dirty = false
commit = false
message = "Bump version: {current_version} → {new_version}"
commit_args = ""

[tool.bumpversion.parts.release]
first_value = 'dev'
optional_value = 'release'
values = [
    'dev',
    'release'
]

[[tool.bumpversion.files]]
filename = "Cargo.toml"

[[tool.bumpversion.files]]
filename = "pyproject.toml"

[[tool.bumpversion.files]]
filename = "py_src/fusion/__init__.py"
